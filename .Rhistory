png(fpp)
local.plot.field(trans$pos.bm$res$summary.random$s[,4],
main="Spatial 0.025 quantile posterior for Barrier model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.q25)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
# 0.5
fpp <- file.path(dir_out_q5, paste0(f, ".png"))
png(fpp)
local.plot.field(trans$pos.bm$res$summary.random$s[,5],
main="Spatial 0.5 quantile posterior for Barrier model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.q50)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
# 0.975
fpp <- file.path(dir_out_q975, paste0(f, ".png"))
png(fpp)
local.plot.field(trans$pos.bm$res$summary.random$s[,6],
main="Spatial 0.975 quantile posterior for Barrier model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.q975)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
# SPATIAL ESTIMATE WITH STATIONARY MODEL
fpp <- file.path(dir_out_s, paste0(f, ".png"))
png(fpp)
local.plot.field(trans$pos.st$res$summary.random$s$mean,
main="Spatial estimate with the stationary model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.mean.st)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
#POS SD st
fpp <- file.path(dir_out_st.sd, paste0(f, ".png"))
png(fpp)
local.plot.field(trans$pos.st$res$summary.random$s$sd,
main="Spatial sd posterior for Stationary model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.sd.st)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
#POS QUANTILES st
# 0.025 st
fpp <- file.path(dir_out_st.q25, paste0(f, ".png"))
png(fpp)
local.plot.field(trans$pos.st$res$summary.random$s[,4],
main="Spatial 0.025 quantile posterior for Stationary model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.q25.st)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
# 0.5 st
fpp <- file.path(dir_out_st.q5, paste0(f, ".png"))
png(fpp)
local.plot.field(trans$pos.st$res$summary.random$s[,5],
main="Spatial 0.5 quantile posterior for Stationary model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.q50.st)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
# 0.975 st
fpp <- file.path(dir_out_st.q975, paste0(f, ".png"))
png(fpp)
local.plot.field(trans$pos.st$res$summary.random$s[,6],
main="Spatial 0.975 quantile posterior for Stationary model",
sub = paste("Barrier Model, range.fraction = c(",
range.fraction[1], ", ", range.fraction[2], ")"),
pal = pal.pos.q975.st)
plot(poly.bar.orginal, add=T, col = col)
dev.off()
}
## bm
# SPATIAL FIELD, u
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_f, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "true.field.gif"))
# POSTERIOR MEAN
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_pm, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.mean.gif"))
#POS SD
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_sd, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.sd.gif"))
#POS QUANTILES
# 0.025
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_q25, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.q25.gif"))
# 0.5
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_q5, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.q5.gif"))
# 0.975
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_q975, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.q975.gif"))
## st
# u
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_s, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "stat.rnadom.mean.gif"))
# st sd
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_st.sd, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.sd.st.gif"))
#POS QUANTILES st
# 0.025
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_st.q25, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.q25.st.gif"))
# 0.5
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_st.q5, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.q5.st.gif"))
# 0.975
image_write(image = image_animate(
image_join(
lapply(list.files(dir_out_st.q975, full.names = TRUE), image_read)),
fps = fps),
path = paste0(gif.path, "pos.q975.st.gif"))
unlink(dir_out_f, recursive = T)
unlink(dir_out_pm, recursive = T)
unlink(dir_out_sd, recursive = T)
unlink(dir_out_q25, recursive = T)
unlink(dir_out_q5, recursive = T)
unlink(dir_out_q975, recursive = T)
unlink(dir_out_s, recursive = T)
unlink(dir_out_st.sd, recursive = T)
unlink(dir_out_st.q25, recursive = T)
unlink(dir_out_st.q5, recursive = T)
unlink(dir_out_st.q975, recursive = T)
}
plot.transparency(nfrac = 5, max.frac = 100, left.poly = 0.01,
poly.bar.orginal = poly.bar.orginal,
fps = 1)
u
smalldist = 0.5
width = c(0.4, 0.4)
poly1 <- local.square.polygon(xlim=c(-1, 5-smalldist/2),
ylim=5+width[1]*c(-.5, .5))
poly2 <- local.square.polygon(xlim=c(5+smalldist/2, 11),
ylim=5+width[2]*c(-.5, .5))
poly.original <- SpatialPolygons(c(poly1@polygons, poly2@polygons))
loc1 <- matrix(c(0,0, 10,0, 0,10, 10,10), 4, 2, byrow = T)
seg <- inla.sp2segment(poly.original)
max.edge.length = 0.4
set.inla.seed = 2303
prior.range = c(1.44, 0.5)
prior.sigma = c(0.7, 0.5)
range.fraction <- c(0.1, 0.1)
barrier.model <- inla.barrier.pcmatern.plus(mesh, fem, barrier.triangles,
prior.range, prior.sigma,
range.fraction)
# range fraction has to have the same length has barrier triangles
Q <- inla.rgeneric.q(barrier.model, "Q", theta = c(0, log(range)))
range
range = 3
# range fraction has to have the same length has barrier triangles
Q <- inla.rgeneric.q(barrier.model, "Q", theta = c(0, log(range)))
u <- suppressWarnings(inla.qsample(n=1, Q=Q, seed = set.inla.seed))
u <- u[ ,1]
u
A.data <- inla.spde.make.A(mesh, loc.data)
u.data <- A.data %*% u
u.data
#fx.pre.field <- function(
smalldist = 0.5
width = c(0.4, 0.4)
max.edge.length = 0.4
set.inla.seed = 2303
#    loc.data = FALSE,
n = 100 # only if loc.data is TRUE
poly1 <- local.square.polygon(xlim=c(-1, 5-smalldist/2),
ylim=5+width[1]*c(-.5, .5))
poly2 <- local.square.polygon(xlim=c(5+smalldist/2, 11),
ylim=5+width[2]*c(-.5, .5))
poly.original <- SpatialPolygons(c(poly1@polygons, poly2@polygons))
loc1 <- matrix(c(0,0, 10,0, 0,10, 10,10), 4, 2, byrow = T)
seg <- inla.sp2segment(poly.original)
#
# - Transforms a SpatialPolygon to an "inla polygon"
mesh <- inla.mesh.2d(loc=loc1, interior = seg,
max.e = max.edge.length, offset=1)
tl <- length(mesh$graph$tv[,1])
# - the number of triangles in the mesh
posTri <- matrix(0, tl, 2)
for (t in 1:tl){
temp = mesh$loc[mesh$graph$tv[t, ], ]
posTri[t,] = colMeans(temp)[c(1,2)]
}
posTri <- SpatialPoints(posTri)
bar.original <- over(poly.original, SpatialPoints(posTri), returnList=T)
# - checking which mesh triangles are inside the barrier area
bar.original <- unlist(bar.original)
poly.bar.orginal <- inla.barrier.polygon(mesh, barrier.triangles = bar.original)
# BARRIER 1
bar1 <- over(poly1, SpatialPoints(posTri), returnList=T)
# - checking which mesh triangles are inside the barrier area
bar1 <- unlist(bar1)
poly.bar1 <- inla.barrier.polygon(mesh, barrier.triangles = bar1)
# BARRIER 2
bar2 <- over(poly2, SpatialPoints(posTri), returnList=T)
# - checking which mesh triangles are inside the barrier area
bar2 <- unlist(bar2)
poly.bar2 <- inla.barrier.polygon(mesh, barrier.triangles = bar2)
# PLOTS
mat <-  inla.barrier.fem.plus(mesh, list(bar1, bar2))
poly1_h <- local.square.polygon_T(xlim=c(2, 5-smalldist/2),
ylim=5+width[1]*c(-.5, .5))
poly2_h <- local.square.polygon_T(xlim=c(5+smalldist/2, 8),
ylim=5+width[2]*c(-.5, .5))
loc1 <- matrix(c(2,2, 8,2, 8,8, 2,8), 4, 2, byrow = T)
locp <- Polygon(loc1, hole = FALSE)
poly.water <- SpatialPolygons(list(Polygons(list(locp, poly1_h, poly2_h), '0')))
poly.water_sf <- st_as_sf(poly.water)
set.seed(set.inla.seed)
loc.data <- spsample(x = poly.water, n = n, type = "random")
loc.data_sf <- st_as_sf(loc.data)
loc.data <- loc.data@coords
mesh_h <-inla.mesh.2d(boundary = poly.water_sf,
max.e = max.edge.length, offset=1)
loc.data
plot(loc.data)
poly.water
loc0
loc0 <- spsample(x = poly.water, n = n, type = "random")
# remove points inside the polygon
is.na(over(loc0, poly.bar.orginal))
loc0
over(poly.original, loc0)
over(poly.original, loc0, returnList = T)
unlist(over(poly.original, loc0, returnList = T))
plot(loc.data)
plot(loc.data)
plot(poly.bar.orginal, add =T)
#    loc.data = FALSE,
n = 10 # only if loc.data is TRUE
loc.data <- spsample(x = poly.water, n = n, type = "random")
plot(loc.data)
plot(poly.bar.orginal, add =T)
log(range)
inla.rgeneric.q(barrier.model, "Q", theta = c(0, log(range)))
log(range)
prior.range = c(1.44, 0.5); prior.sigma = c(0.7, 0.5)
range = 3
set.inla.seed = 2303 # make sure is the same as prev. fx if loc.data = T
sigma.u = 1; sigma.epsilon = 0.2
# field = TRUE has to be true to start
barrier.model <- inla.barrier.pcmatern.plus(mesh, fem, barrier.triangles,
prior.range, prior.sigma,
range.fraction)
# range fraction has to have the same length has barrier triangles
Q <- inla.rgeneric.q(barrier.model, "Q", theta = c(0, log(range)))
u <- suppressWarnings(inla.qsample(n=1, Q=Q, seed = set.inla.seed))
u <- u[ ,1]
A.data <- inla.spde.make.A(mesh, loc.data)
u.data <- A.data %*% u
df <- data.frame(loc.data)
names(df) <- c('locx', 'locy')
df$y <- drop(sigma.u * u.data + sigma.epsilon * rnorm(nrow(df)))
stk <- inla.stack(data=list(y=df$y),
A=list(A.data, 1),
effects=list(s=1:mesh$n,
intercept=rep(1, nrow(df))),
remove.unused = FALSE,
tag='est')
formula <- y ~ 0 + intercept + f(s, model = barrier.model)
res.barrier <- inla(formula, data = inla.stack.data(stk),
control.predictor = list(A = inla.stack.A(stk)),
family = 'gaussian',
control.family = list(hyper = list(
prec = list(prior = "pc.prec", fixed = FALSE, param = c(0.2,0.5)))))
## --------------------------------------------------------------------------------
local.plot.field(res.barrier$summary.random$s$mean,
main="Spatial posterior for Barrier model")
res.barrier <- inla(formula, data = inla.stack.data(stk),
control.predictor = list(A = inla.stack.A(stk)),
family = 'gaussian',
control.family = list(hyper = list(
prec = list(prior = "pc.prec", fixed = FALSE, param = c(0.2,0.5)))),
control.mode=list(restart=T, theta=c(3.2, 0.4, 1.6)))
## --------------------------------------------------------------------------------
local.plot.field(res.barrier$summary.random$s$mean,
main="Spatial posterior for Barrier model")
pre.field7 <- fx.pre.field(loc.data = T,
n = 20)
pf <- pre.field7
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=20/")
pre.field8 <- fx.pre.field(loc.data = T,
n = 10)
pf <- pre.field8
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=10/")
plot(poly.bar.orginal)
pf <- pre.field8
poly.bar.orginal <- pf$poly.bar.orginal
plot(poly.bar.orginal)
pre.field7 <- fx.pre.field(loc.data = T,
width = c(2, 2),
n = 20)
pf <- pre.field7
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=20/")
##
pre.field8 <- fx.pre.field(loc.data = T,
width = c(2, 2),
n = 10)
pf <- pre.field8
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=20/")
plot(poly.bar.orginal)
##
pre.field7.1 <- fx.pre.field(loc.data = T,
width = c(2, 2),
smalldist = 0.8,
n = 20)
pf <- pre.field7.1
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=20/smdist=0.8/")
##
pre.field7.2 <- fx.pre.field(loc.data = T,
width = c(2, 2),
smalldist = 0.3,
n = 20)
pf <- pre.field7.2
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=20/smdist=0.3/")
plot(poly.bar.orginal)
pre.field7 <- fx.pre.field(loc.data = T,
width = c(2, 2),
n = 20)
pf <- pre.field7
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=20/")
##
pre.field8 <- fx.pre.field(loc.data = T,
width = c(2, 2),
n = 10)
pf <- pre.field8
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=10/")
pre.field9 <- fx.pre.field(loc.data = T,
width = c(2.5, 2.5),
smalldist = 0.8,
n = 20)
pf <- pre.field9
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
max.frac = 100,
left.poly = 0.01,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2.5,2.5) plots/smdist=0.8/")
##
pre.field9.1 <- fx.pre.field(loc.data = T,
width = c(2.5, 2.5),
smalldist = 1,
n = 20)
pf <- pre.field9.1
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
max.frac = 100,
left.poly = 0.01,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2.5,2.5) plots/smdist=1/")
plot(poly.bar.orginal)
##
pre.field7.1 <- fx.pre.field(loc.data = T,
width = c(2, 2),
smalldist = 0.8,
n = 20)
pf <- pre.field7.1
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
poly.bar.orginal = poly.bar.orginal,
fps = 1,
gif.path = "gif/gif.fx/width=c(2,2) plots/n=20/smdist=0.8/")
pre.field10 <- fx.pre.field(loc.data = T,
width = c(0.5, 3),
smalldist = 0.5,
n = 20)
pf <- pre.field10
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
max.frac = 100,
left.poly = 0.01,
poly.bar.orginal = poly.bar.orginal,
range = 10,
fps = 1,
gif.path = "gif/gif.fx/width=c(0.5,3) plots/")
dir_out_f
pre.field10.1 <- fx.pre.field(loc.data = T,
width = c(0.3, 3),
smalldist = 0.5,
n = 30)
pf <- pre.field10.1
mesh <- pf$mesh
fem <- pf$mat
barrier.triangles <- list(pf$bar1, pf$bar2)
loc.data <- pf$loc.data
poly.bar.orginal <- pf$poly.bar.orginal
plot.transparency(nfrac = 5,
max.frac = 100,
left.poly = 0.01,
poly.bar.orginal = poly.bar.orginal,
range = 10,
fps = 1,
gif.path = "gif/gif.fx/width=c(0.3,3) plots/")

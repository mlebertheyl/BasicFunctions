"0","inla.rgeneric.q"
"1","function (rmodel, cmd = c(""graph"", ""Q"", ""mu"", ""initial"", ""log.norm.const"", 
"
"1","    ""log.prior"", ""quit""), theta = NULL) 
"
"1","{
"
"1","    if (missing(cmd)) {
"
"1","        stop(""A value for argument 'cmd' is required."")
"
"1","    }
"
"1","    cmd <- match.arg(cmd)
"
"1","    rmodel.orig <- rmodel
"
"1","    if (is.character(rmodel)) {
"
"1","        rmodel <- get(rmodel, envir = parent.frame())
"
"1","    }
"
"1","    if (!inherits(rmodel, ""inla.rgeneric"")) {
"
"1","        stop(""Argument 'rmodel' is not of class 'inla.rgeneric' (usually the output of 'inla.rgeneric.define')"")
"
"1","    }
"
"1","    func <- rmodel$f$rgeneric$definition
"
"1","    if (cmd %in% c(""Q"", ""mu"", ""log.norm.const"", ""log.prior"")) {
"
"1","        initial <- do.call(what = func, args = list(cmd = ""initial"", 
"
"1","            theta = NULL))
"
"1","        if (length(initial) != length(theta)) {
"
"1","            stop(paste0(""Length of argument theta: "", length(theta), 
"
"1","                "", does not match the length of the initial values in 'rmodel': "", 
"
"1","                length(initial)))
"
"1","        }
"
"1","        if (length(initial) == 0) {
"
"1","            theta <- NULL
"
"1","        }
"
"1","    }
"
"1","    else {
"
"1","        theta <- NULL
"
"1","    }
"
"1","    res <- do.call(what = func, args = list(cmd = cmd, theta = theta))
"
"1","    if (cmd %in% c(""Q"", ""graph"")) {
"
"1","        if (!(is.matrix(res) || is(res, ""Matrix""))) {
"
"1","            len.x <- length(res)
"
"1","            graph <- do.call(what = func, args = list(cmd = ""graph""))
"
"1","            diag(graph) <- 1
"
"1","            graph <- inla.as.sparse(graph)
"
"1","            idx <- which(graph@i <= graph@j)
"
"1","            graph@i <- graph@i[idx]
"
"1","            graph@j <- graph@j[idx]
"
"1","            graph@x <- graph@x[idx]
"
"1","            graph@x[] <- 1
"
"1","            stopifnot(length(graph@x) == len.x)
"
"1","            Q <- inla.as.sparse(graph)
"
"1","            graph <- NULL
"
"1","            Q@x <- res
"
"1","        }
"
"1","        else {
"
"1","            if (cmd %in% ""Q"") {
"
"1","                Q <- inla.as.sparse(res)
"
"1","            }
"
"1","            else {
"
"1","                diag(res) <- 1
"
"1","                Q <- inla.as.sparse(res, na.rm = TRUE, zeros.rm = TRUE)
"
"1","                Q[Q != 0] <- 1
"
"1","            }
"
"1","        }
"
"1","        n <- dim(Q)[1]
"
"1","        idx.eq <- which(Q@i == Q@j)
"
"1","        idx.gt <- which(Q@i < Q@j)
"
"1","        Q <- sparseMatrix(i = c(Q@i[idx.eq], Q@i[idx.gt], Q@j[idx.gt]), 
"
"1","            j = c(Q@j[idx.eq], Q@j[idx.gt], Q@i[idx.gt]), x = c(Q@x[idx.eq], 
"
"1","                Q@x[idx.gt], Q@x[idx.gt]), index1 = FALSE, dims = c(n, 
"
"1","                n), repr = ""T"")
"
"1","        Q <- inla.as.sparse(Q)
"
"1","        return(Q)
"
"1","    }
"
"1","    else if (cmd %in% c(""mu"", ""initial"", ""log.norm.const"", ""log.prior"")) {
"
"1","        return(c(as.numeric(res)))
"
"1","    }
"
"1","    else if (cmd %in% ""quit"") {
"
"1","        return(NULL)
"
"1","    }
"
"1","    else {
"
"1","        stop(paste(""Unknown command"", cmd))
"
"1","    }
"
"1","}
"
"1","<bytecode: 0x12d913f90>
"
"1","<environment: namespace:INLA>
"
